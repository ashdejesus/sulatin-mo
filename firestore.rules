/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model, ensuring that users can only access their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user account information.
 * - /users/{userId}/translations/{translationId}: Stores user-specific saved translations.
 *
 * Key Security Decisions:
 * - Listing the /users collection is forbidden to prevent user enumeration.
 * - All write operations are restricted to authenticated users and are owner-only.
 *
 * Denormalization for Authorization:
 * - The userId is encoded directly in the path, eliminating the need for get() calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents listing the root /users collection.  User documents can only be accessed via their UID.
     * @path /users
     * @allow (list) Denied - Listing the entire collection is not permitted.
     * @deny (list) Attempt to list the /users collection.
     * @principle Prevents user enumeration and protects user privacy.
     */
    match /users {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to individual user documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own document at /users/user123.
     * @allow (get) User with UID 'user123' can get their own document at /users/user123.
     * @allow (update) User with UID 'user123' can update their own document at /users/user123.
     * @allow (delete) User with UID 'user123' can delete their own document at /users/user123.
     * @deny (create) User with UID 'user456' cannot create a document at /users/user123.
     * @deny (update) User with UID 'user456' cannot update the document at /users/user123.
     * @deny (delete) User with UID 'user456' cannot delete the document at /users/user123.
     * @principle Enforces document ownership, ensuring users can only manage their own data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isSelfCreation(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to a user's saved translations.
     * @path /users/{userId}/translations/{translationId}
     * @allow (create) User with UID 'user123' can create a translation under /users/user123/translations/translation1.
     * @allow (get) User with UID 'user123' can read a translation under /users/user123/translations/translation1.
     * @allow (update) User with UID 'user123' can update a translation under /users/user123/translations/translation1.
     * @allow (delete) User with UID 'user123' can delete a translation under /users/user123/translations/translation1.
     * @deny (create) User with UID 'user456' cannot create a translation under /users/user123/translations/translation1.
     * @deny (get) User with UID 'user456' cannot read a translation under /users/user123/translations/translation1.
     * @deny (update) User with UID 'user456' cannot update a translation under /users/user123/translations/translation1.
     * @deny (delete) User with UID 'user456' cannot delete a translation under /users/user123/translations/translation1.
     * @principle Enforces user-specific data isolation using path-based rules.
     */
    match /users/{userId}/translations/{translationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn();
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    //----------------------------------------------------------------------------------------------
    // Helper functions
    //----------------------------------------------------------------------------------------------

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is authenticated; otherwise, false.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @return True if the request is authenticated and the user ID matches; otherwise, false.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the resource and the resource exists.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @return True if the request is authenticated, the user ID matches, and the resource exists; otherwise, false.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is creating their own user document.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @return True if the request is authenticated and the user ID matches; otherwise, false.
     */
    function isSelfCreation(userId) {
        return isSignedIn() && request.auth.uid == userId;
    }
  }
}