/**
 * @fileoverview Firestore Security Rules for the Baybayin App.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Each user's data (account, translations, quiz results) is stored under a unique path derived from their Firebase UID.
 * This ensures that users can only access their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user account information.  The {userId} must match the Firebase auth UID.
 * - /users/{userId}/translations/{translationId}: Stores saved translations for a specific user.
 * - /users/{userId}/quizResults/{quizResultId}: Stores quiz results for a specific user.
 *
 * Key Security Decisions:
 * - User listing is disallowed at the root `/users` collection to protect privacy.
 * - All write operations are restricted to authenticated users.
 * - Data consistency is enforced by validating that the user ID in the path matches the user ID in the document data on creation.
 *
 * Denormalization for Authorization:
 *  - N/A - Path-based ownership is used, so denormalization is not required.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Protects the root `/users` collection.  User listing is disallowed.  Writes are denied except for authenticated users creating their own document.
     * @path /users/{userId}
     * @allow (create) User 'testUser' with UID 'testUid' creates their own account document at /users/testUid.
     * @deny (create) User 'testUser' attempts to create a document at /users/anotherUser.
     * @deny (list) Any user attempts to list all documents in `/users`.
     * @principle Enforces user ownership for account data and prevents unauthorized listing.
     */
    match /users/{userId} {
      allow get: if false;
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to saved translations for a specific user. Only the owner can read, create, update, or delete translations.
     * @path /users/{userId}/translations/{translationId}
     * @allow (create) User 'testUser' with UID 'testUid' creates a translation at /users/testUid/translations/translation1.
     * @allow (get) User 'testUser' with UID 'testUid' reads their translation at /users/testUid/translations/translation1.
     * @deny (create) User 'testUser' attempts to create a translation for another user at /users/anotherUser/translations/translation1.
     * @principle Enforces user ownership for saved translations.
     */
    match /users/{userId}/translations/{translationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to quiz results for a specific user. Only the owner can read, create, update, or delete quiz results.
     * @path /users/{userId}/quizResults/{quizResultId}
     * @allow (create) User 'testUser' with UID 'testUid' creates a quiz result at /users/testUid/quizResults/quizResult1.
     * @allow (get) User 'testUser' with UID 'testUid' reads their quiz result at /users/testUid/quizResults/quizResult1.
     * @deny (create) User 'testUser' attempts to create a quiz result for another user at /users/anotherUser/quizResults/quizResult1.
     * @principle Enforces user ownership for quiz results.
     */
    match /users/{userId}/quizResults/{quizResultId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}